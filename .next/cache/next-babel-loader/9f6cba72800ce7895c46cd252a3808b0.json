{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { Formik, Form } from \"formik\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport { InputField } from \"../../components/InputField\";\nimport { Box, Button, Link, Flex } from \"@chakra-ui/core\";\nimport { useChangePasswordMutation, MeDocument } from \"../../generated/graphql\";\nimport { useRouter } from \"next/router\";\nimport NextLink from \"next/link\";\nimport { withApollo } from \"../../utils/withApollo\";\n\nconst ChangePassword = () => {\n  const router = useRouter();\n  const [changePassword] = useChangePasswordMutation();\n  const {\n    0: tokenError,\n    1: setTokenError\n  } = useState(\"\");\n  return __jsx(Wrapper, {\n    variant: \"small\"\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await changePassword({\n        variables: {\n          newPassword: values.newPassword,\n          token: typeof router.query.token === \"string\" ? router.query.token : \"\"\n        },\n        update: (cache, {\n          data\n        }) => {\n          cache.writeQuery({\n            query: MeDocument,\n            data: {\n              __typename: \"Query\",\n              me: data === null || data === void 0 ? void 0 : data.changePassword.user\n            }\n          });\n        }\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n        const errorMap = toErrorMap(response.data.changePassword.errors);\n\n        if (\"token\" in errorMap) {\n          setTokenError(errorMap.token);\n        }\n\n        setErrors(errorMap);\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n        // worked\n        router.push(\"/\");\n      }\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, null, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"new password\",\n    label: \"New Password\",\n    type: \"password\"\n  }), tokenError ? __jsx(Flex, null, __jsx(Box, {\n    mr: 2,\n    style: {\n      color: \"red\"\n    }\n  }, tokenError), __jsx(NextLink, {\n    href: \"/forgot-password\"\n  }, __jsx(Link, null, \"click here to get a new one\"))) : null, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    variantColor: \"teal\"\n  }, \"change password\"))));\n};\n\nexport default withApollo({\n  ssr: false\n})(ChangePassword);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { Formik, Form } from \"formik\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nimport { InputField } from \"../../components/InputField\";\nimport { Box, Button, Link, Flex } from \"@chakra-ui/core\";\nimport { useChangePasswordMutation, MeDocument } from \"../../generated/graphql\";\nimport { useRouter } from \"next/router\";\nimport NextLink from \"next/link\";\nimport { withApollo } from \"../../utils/withApollo\";\n\nvar ChangePassword = function ChangePassword() {\n  var router = useRouter();\n\n  var _useChangePasswordMut = useChangePasswordMutation(),\n      _useChangePasswordMut2 = _slicedToArray(_useChangePasswordMut, 1),\n      changePassword = _useChangePasswordMut2[0];\n\n  var _useState = useState(\"\"),\n      tokenError = _useState[0],\n      setTokenError = _useState[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\"\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var _response$data, _response$data2;\n\n        var setErrors, response, errorMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref.setErrors;\n                _context.next = 3;\n                return changePassword({\n                  variables: {\n                    newPassword: values.newPassword,\n                    token: typeof router.query.token === \"string\" ? router.query.token : \"\"\n                  },\n                  update: function update(cache, _ref3) {\n                    var data = _ref3.data;\n                    cache.writeQuery({\n                      query: MeDocument,\n                      data: {\n                        __typename: \"Query\",\n                        me: data === null || data === void 0 ? void 0 : data.changePassword.user\n                      }\n                    });\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n                  errorMap = toErrorMap(response.data.changePassword.errors);\n\n                  if (\"token\" in errorMap) {\n                    setTokenError(errorMap.token);\n                  }\n\n                  setErrors(errorMap);\n                } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n                  // worked\n                  router.push(\"/\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, null, __jsx(InputField, {\n      name: \"newPassword\",\n      placeholder: \"new password\",\n      label: \"New Password\",\n      type: \"password\"\n    }), tokenError ? __jsx(Flex, null, __jsx(Box, {\n      mr: 2,\n      style: {\n        color: \"red\"\n      }\n    }, tokenError), __jsx(NextLink, {\n      href: \"/forgot-password\"\n    }, __jsx(Link, null, \"click here to get a new one\"))) : null, __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\"\n    }, \"change password\"));\n  }));\n};\n\nexport default withApollo({\n  ssr: false\n})(ChangePassword);","map":null,"metadata":{},"sourceType":"module"}
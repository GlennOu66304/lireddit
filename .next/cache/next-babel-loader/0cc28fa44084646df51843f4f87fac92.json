{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Button, Flex, Heading, Link, Stack, Text } from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\nimport { EditDeletePostButtons } from \"../components/EditDeletePostButtons\";\nimport { Layout } from \"../components/Layout\";\nimport { UpdootSection } from \"../components/UpdootSection\";\nimport { usePostsQuery } from \"../generated/graphql\";\nimport { withApollo } from \"../utils/withApollo\";\n\nconst Index = () => {\n  const {\n    data,\n    error,\n    loading,\n    fetchMore,\n    variables\n  } = usePostsQuery({\n    variables: {\n      limit: 15,\n      cursor: null\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  if (!loading && !data) {\n    return __jsx(\"div\", null, __jsx(\"div\", null, \"you got query failed for some reason\"), __jsx(\"div\", null, error === null || error === void 0 ? void 0 : error.message));\n  }\n\n  return __jsx(Layout, null, !data && loading ? __jsx(\"div\", null, \"loading...\") : __jsx(Stack, {\n    spacing: 8\n  }, data.posts.posts.map(p => !p ? null : __jsx(Flex, {\n    key: p.id,\n    p: 5,\n    shadow: \"md\",\n    borderWidth: \"1px\"\n  }, __jsx(UpdootSection, {\n    post: p\n  }), __jsx(Box, {\n    flex: 1\n  }, __jsx(NextLink, {\n    href: \"/post/[id]\",\n    as: `/post/${p.id}`\n  }, __jsx(Link, null, __jsx(Heading, {\n    fontSize: \"xl\"\n  }, p.title))), __jsx(Text, null, \"posted by \", p.creator.username), __jsx(Flex, {\n    align: \"center\"\n  }, __jsx(Text, {\n    flex: 1,\n    mt: 4\n  }, p.textSnippet), __jsx(Box, {\n    ml: \"auto\"\n  }, __jsx(EditDeletePostButtons, {\n    id: p.id,\n    creatorId: p.creator.id\n  }))))))), data && data.posts.hasMore ? __jsx(Flex, null, __jsx(Button, {\n    onClick: () => {\n      fetchMore({\n        variables: {\n          limit: variables === null || variables === void 0 ? void 0 : variables.limit,\n          cursor: data.posts.posts[data.posts.posts.length - 1].createdAt\n        } // updateQuery: (\n        //   previousValue,\n        //   { fetchMoreResult }\n        // ): PostsQuery => {\n        //   if (!fetchMoreResult) {\n        //     return previousValue as PostsQuery;\n        //   }\n        //   return {\n        //     __typename: \"Query\",\n        //     posts: {\n        //       __typename: \"PaginatedPosts\",\n        //       hasMore: (fetchMoreResult as PostsQuery).posts.hasMore,\n        //       posts: [\n        //         ...(previousValue as PostsQuery).posts.posts,\n        //         ...(fetchMoreResult as PostsQuery).posts.posts,\n        //       ],\n        //     },\n        //   };\n        // },\n\n      });\n    },\n    isLoading: loading,\n    m: \"auto\",\n    my: 8\n  }, \"load more\")) : null);\n};\n\nexport default withApollo({\n  ssr: true\n})(Index);","map":null,"metadata":{},"sourceType":"module"}
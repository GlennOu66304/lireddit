{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        fragment __ on Post {\\n          points\\n          voteStatus\\n        }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      fragment _ on Post {\\n        id\\n        points\\n        voteStatus\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { Flex, IconButton } from \"@chakra-ui/core\";\nimport { useVoteMutation } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\n\nvar updateAfterVote = function updateAfterVote(value, postId, cache) {\n  var data = cache.readFragment({\n    id: \"Post:\" + postId,\n    fragment: gql(_templateObject())\n  });\n\n  if (data) {\n    if (data.voteStatus === value) {\n      return;\n    }\n\n    var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n    cache.writeFragment({\n      id: \"Post:\" + postId,\n      fragment: gql(_templateObject2()),\n      data: {\n        points: newPoints,\n        voteStatus: value\n      }\n    });\n  }\n};\n\nexport var UpdootSection = function UpdootSection(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(\"not-loading\"),\n      loadingState = _useState[0],\n      setLoadingState = _useState[1];\n\n  var _useVoteMutation = useVoteMutation(),\n      _useVoteMutation2 = _slicedToArray(_useVoteMutation, 1),\n      vote = _useVoteMutation2[0];\n\n  return __jsx(Flex, {\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    mr: 4\n  }, __jsx(IconButton, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(post.voteStatus === 1)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setLoadingState(\"updoot-loading\");\n              _context.next = 5;\n              return vote({\n                variables: {\n                  postId: post.id,\n                  value: 1\n                },\n                update: function update(cache) {\n                  return updateAfterVote(1, post.id, cache);\n                }\n              });\n\n            case 5:\n              setLoadingState(\"not-loading\");\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    variantColor: post.voteStatus === 1 ? \"green\" : undefined,\n    isLoading: loadingState === \"updoot-loading\",\n    \"aria-label\": \"updoot post\",\n    icon: \"chevron-up\"\n  }), post.points, __jsx(IconButton, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(post.voteStatus === -1)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              setLoadingState(\"downdoot-loading\");\n              _context2.next = 5;\n              return vote({\n                variables: {\n                  postId: post.id,\n                  value: -1\n                },\n                update: function update(cache) {\n                  return updateAfterVote(-1, post.id, cache);\n                }\n              });\n\n            case 5:\n              setLoadingState(\"not-loading\");\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    variantColor: post.voteStatus === -1 ? \"red\" : undefined,\n    isLoading: loadingState === \"downdoot-loading\",\n    \"aria-label\": \"downdoot post\",\n    icon: \"chevron-down\"\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/glenn/lireddit/src/components/NavBar.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Box, Link, Flex, Button, Heading } from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\nimport { useMeQuery, useLogoutMutation } from \"../generated/graphql\";\nimport { isServer } from \"../utils/isServer\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\nexport const NavBar = ({}) => {\n  const router = useRouter();\n  const [logout, {\n    loading: logoutFetching\n  }] = useLogoutMutation();\n  const apolloClient = useApolloClient();\n  const {\n    data,\n    loading\n  } = useMeQuery({\n    skip: isServer()\n  });\n  let body = null; // data is loading\n\n  if (loading) {// user not logged in\n  } else if (!(data === null || data === void 0 ? void 0 : data.me)) {\n    body = __jsx(React.Fragment, null, __jsx(NextLink, {\n      href: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      mr: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, \"login\")), __jsx(NextLink, {\n      href: \"/register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, __jsx(Link, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"register\"))); // user is logged in\n  } else {\n    body = __jsx(Flex, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, __jsx(NextLink, {\n      href: \"/create-post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      as: Link,\n      mr: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, \"create post\")), __jsx(Box, {\n      mr: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, data.me.username), __jsx(Button, {\n      onClick: async () => {\n        await logout();\n        await apolloClient.resetStore();\n      },\n      isLoading: logoutFetching,\n      variant: \"link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"logout\"));\n  }\n\n  return __jsx(Flex, {\n    zIndex: 1,\n    position: \"sticky\",\n    top: 0,\n    bg: \"tan\",\n    p: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    flex: 1,\n    m: \"auto\",\n    align: \"center\",\n    maxW: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(NextLink, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"LiReddit\"))), __jsx(Box, {\n    ml: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, body)));\n};","map":{"version":3,"sources":["/Users/glenn/lireddit/src/components/NavBar.tsx"],"names":["React","Box","Link","Flex","Button","Heading","NextLink","useMeQuery","useLogoutMutation","isServer","useRouter","useApolloClient","NavBar","router","logout","loading","logoutFetching","apolloClient","data","skip","body","me","username","resetStore"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Box, Link, Flex, Button, Heading } from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\nimport { useMeQuery, useLogoutMutation } from \"../generated/graphql\";\nimport { isServer } from \"../utils/isServer\";\nimport { useRouter } from \"next/router\";\nimport { useApolloClient } from \"@apollo/client\";\n\ninterface NavBarProps {}\n\nexport const NavBar: React.FC<NavBarProps> = ({}) => {\n  const router = useRouter();\n  const [logout, { loading: logoutFetching }] = useLogoutMutation();\n  const apolloClient = useApolloClient();\n  const { data, loading } = useMeQuery({\n    skip: isServer(),\n  });\n\n  let body = null;\n\n  // data is loading\n  if (loading) {\n    // user not logged in\n  } else if (!data?.me) {\n    body = (\n      <>\n        <NextLink href=\"/login\">\n          <Link mr={2}>login</Link>\n        </NextLink>\n        <NextLink href=\"/register\">\n          <Link>register</Link>\n        </NextLink>\n      </>\n    );\n    // user is logged in\n  } else {\n    body = (\n      <Flex align=\"center\">\n        <NextLink href=\"/create-post\">\n          <Button as={Link} mr={4}>\n            create post\n          </Button>\n        </NextLink>\n        <Box mr={2}>{data.me.username}</Box>\n        <Button\n          onClick={async () => {\n            await logout();\n            await apolloClient.resetStore();\n          }}\n          isLoading={logoutFetching}\n          variant=\"link\"\n        >\n          logout\n        </Button>\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex zIndex={1} position=\"sticky\" top={0} bg=\"tan\" p={4}>\n      <Flex flex={1} m=\"auto\" align=\"center\" maxW={800}>\n        <NextLink href=\"/\">\n          <Link>\n            <Heading>LiReddit</Heading>\n          </Link>\n        </NextLink>\n        <Box ml={\"auto\"}>{body}</Box>\n      </Flex>\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nvar __jsx = React.createElement;\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Layout } from \"../components/Layout\";\nimport { useCreatePostMutation } from \"../generated/graphql\";\nimport { useIsAuth } from \"../utils/useIsAuth\";\nimport { withApollo } from \"../utils/withApollo\";\n\nvar CreatePost = function CreatePost(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  useIsAuth();\n\n  var _useCreatePostMutatio = useCreatePostMutation(),\n      _useCreatePostMutatio2 = _slicedToArray(_useCreatePostMutatio, 1),\n      createPost = _useCreatePostMutatio2[0];\n\n  return __jsx(Layout, {\n    variant: \"small\"\n  }, __jsx(Formik, {\n    initialValues: {\n      title: \"\",\n      text: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var _yield$createPost, errors;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createPost({\n                  variables: {\n                    input: values\n                  },\n                  update: function update(cache) {\n                    cache.evict({\n                      fieldName: \"posts:{}\"\n                    });\n                  }\n                });\n\n              case 2:\n                _yield$createPost = _context.sent;\n                errors = _yield$createPost.errors;\n\n                if (!errors) {\n                  router.push(\"/\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, null, __jsx(InputField, {\n      name: \"title\",\n      placeholder: \"title\",\n      label: \"Title\"\n    }), __jsx(Box, {\n      mt: 4\n    }, __jsx(InputField, {\n      textarea: true,\n      name: \"text\",\n      placeholder: \"text...\",\n      label: \"Body\"\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\"\n    }, \"create post\"));\n  }));\n};\n\nexport default withApollo({\n  ssr: false\n})(CreatePost);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createWithApollo } from \"./createWithApollo\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst createClient = ctx => {\n  var _ctx$req;\n\n  return new ApolloClient({\n    uri: process.env.NEXT_PUBLIC_API_URL,\n    credentials: \"include\",\n    headers: {\n      cookie: (true ? ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie : undefined) || \"\"\n    },\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            posts: {\n              keyArgs: [],\n\n              merge(existing, incoming) {\n                return _objectSpread(_objectSpread({}, incoming), {}, {\n                  posts: [...((existing === null || existing === void 0 ? void 0 : existing.posts) || []), ...incoming.posts]\n                });\n              }\n\n            }\n          }\n        }\n      }\n    })\n  });\n};\n\nexport const withApollo = createWithApollo(createClient);","map":{"version":3,"sources":["/Users/glenn/lireddit/src/utils/withApollo.ts"],"names":["createWithApollo","ApolloClient","InMemoryCache","createClient","ctx","uri","process","env","NEXT_PUBLIC_API_URL","credentials","headers","cookie","req","undefined","cache","typePolicies","Query","fields","posts","keyArgs","merge","existing","incoming","withApollo"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;;AAIA,MAAMC,YAAY,GAAIC,GAAD;AAAA;;AAAA,SACnB,IAAIH,YAAJ,CAAiB;AACfI,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADF;AAEfC,IAAAA,WAAW,EAAE,SAFE;AAGfC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EACJ,CAAC,OACGP,GADH,aACGA,GADH,mCACGA,GAAG,CAAEQ,GADR,6CACG,SAAUF,OAAV,CAAkBC,MADrB,GAEGE,SAFJ,KAEkB;AAJb,KAHM;AASfC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ,CAAkB;AACvBa,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,EAAE,EADJ;;AAELC,cAAAA,KAAK,CACHC,QADG,EAEHC,QAFG,EAGa;AAChB,uDACKA,QADL;AAEEJ,kBAAAA,KAAK,EAAE,CAAC,IAAI,CAAAG,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,KAAV,KAAmB,EAAvB,CAAD,EAA6B,GAAGI,QAAQ,CAACJ,KAAzC;AAFT;AAID;;AAVI;AADD;AADH;AADK;AADS,KAAlB;AATQ,GAAjB,CADmB;AAAA,CAArB;;AAgCA,OAAO,MAAMK,UAAU,GAAGvB,gBAAgB,CAACG,YAAD,CAAnC","sourcesContent":["import { createWithApollo } from \"./createWithApollo\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { PaginatedPosts } from \"../generated/graphql\";\nimport { NextPageContext } from \"next\";\n\nconst createClient = (ctx: NextPageContext) =>\n  new ApolloClient({\n    uri: process.env.NEXT_PUBLIC_API_URL as string,\n    credentials: \"include\",\n    headers: {\n      cookie:\n        (typeof window === \"undefined\"\n          ? ctx?.req?.headers.cookie\n          : undefined) || \"\",\n    },\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            posts: {\n              keyArgs: [],\n              merge(\n                existing: PaginatedPosts | undefined,\n                incoming: PaginatedPosts\n              ): PaginatedPosts {\n                return {\n                  ...incoming,\n                  posts: [...(existing?.posts || []), ...incoming.posts],\n                };\n              },\n            },\n          },\n        },\n      },\n    }),\n  });\n\nexport const withApollo = createWithApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}
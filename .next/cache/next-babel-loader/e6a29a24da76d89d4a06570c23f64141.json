{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/glenn/lireddit/src/components/UpdootSection.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        fragment __ on Post {\\n          points\\n          voteStatus\\n        }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      fragment _ on Post {\\n        id\\n        points\\n        voteStatus\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { Flex, IconButton } from \"@chakra-ui/core\";\nimport { useVoteMutation } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\n\nvar updateAfterVote = function updateAfterVote(value, postId, cache) {\n  var data = cache.readFragment({\n    id: \"Post:\" + postId,\n    fragment: gql(_templateObject())\n  });\n\n  if (data) {\n    if (data.voteStatus === value) {\n      return;\n    }\n\n    var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n    cache.writeFragment({\n      id: \"Post:\" + postId,\n      fragment: gql(_templateObject2()),\n      data: {\n        points: newPoints,\n        voteStatus: value\n      }\n    });\n  }\n};\n\nexport var UpdootSection = function UpdootSection(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(\"not-loading\"),\n      loadingState = _useState[0],\n      setLoadingState = _useState[1];\n\n  var _useVoteMutation = useVoteMutation(),\n      _useVoteMutation2 = _slicedToArray(_useVoteMutation, 1),\n      vote = _useVoteMutation2[0];\n\n  return __jsx(Flex, {\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    mr: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(IconButton, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(post.voteStatus === 1)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setLoadingState(\"updoot-loading\");\n              _context.next = 5;\n              return vote({\n                variables: {\n                  postId: post.id,\n                  value: 1\n                },\n                update: function update(cache) {\n                  return updateAfterVote(1, post.id, cache);\n                }\n              });\n\n            case 5:\n              setLoadingState(\"not-loading\");\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })),\n    variantColor: post.voteStatus === 1 ? \"green\" : undefined,\n    isLoading: loadingState === \"updoot-loading\",\n    \"aria-label\": \"updoot post\",\n    icon: \"chevron-up\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), post.points, __jsx(IconButton, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(post.voteStatus === -1)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              setLoadingState(\"downdoot-loading\");\n              _context2.next = 5;\n              return vote({\n                variables: {\n                  postId: post.id,\n                  value: -1\n                },\n                update: function update(cache) {\n                  return updateAfterVote(-1, post.id, cache);\n                }\n              });\n\n            case 5:\n              setLoadingState(\"not-loading\");\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })),\n    variantColor: post.voteStatus === -1 ? \"red\" : undefined,\n    isLoading: loadingState === \"downdoot-loading\",\n    \"aria-label\": \"downdoot post\",\n    icon: \"chevron-down\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(UpdootSection, \"jHgrz2oHWI/pk06eczC0WvPpRlI=\", false, function () {\n  return [useVoteMutation];\n});\n\n_c = UpdootSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdootSection\");","map":{"version":3,"sources":["/Users/glenn/lireddit/src/components/UpdootSection.tsx"],"names":["React","useState","Flex","IconButton","useVoteMutation","gql","updateAfterVote","value","postId","cache","data","readFragment","id","fragment","voteStatus","newPoints","points","writeFragment","UpdootSection","post","loadingState","setLoadingState","vote","variables","update","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Flex, IconButton } from \"@chakra-ui/core\";\nimport {\n  PostSnippetFragment,\n  useVoteMutation,\n  VoteMutation,\n} from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\nimport { ApolloCache } from \"@apollo/client\";\n\ninterface UpdootSectionProps {\n  post: PostSnippetFragment;\n}\n\nconst updateAfterVote = (\n  value: number,\n  postId: number,\n  cache: ApolloCache<VoteMutation>\n) => {\n  const data = cache.readFragment<{\n    id: number;\n    points: number;\n    voteStatus: number | null;\n  }>({\n    id: \"Post:\" + postId,\n    fragment: gql`\n      fragment _ on Post {\n        id\n        points\n        voteStatus\n      }\n    `,\n  });\n\n  if (data) {\n    if (data.voteStatus === value) {\n      return;\n    }\n    const newPoints =\n      (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\n    cache.writeFragment({\n      id: \"Post:\" + postId,\n      fragment: gql`\n        fragment __ on Post {\n          points\n          voteStatus\n        }\n      `,\n      data: { points: newPoints, voteStatus: value },\n    });\n  }\n};\n\nexport const UpdootSection: React.FC<UpdootSectionProps> = ({ post }) => {\n  const [loadingState, setLoadingState] = useState<\n    \"updoot-loading\" | \"downdoot-loading\" | \"not-loading\"\n  >(\"not-loading\");\n  const [vote] = useVoteMutation();\n  return (\n    <Flex direction=\"column\" justifyContent=\"center\" alignItems=\"center\" mr={4}>\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === 1) {\n            return;\n          }\n          setLoadingState(\"updoot-loading\");\n          await vote({\n            variables: {\n              postId: post.id,\n              value: 1,\n            },\n            update: (cache) => updateAfterVote(1, post.id, cache),\n          });\n          setLoadingState(\"not-loading\");\n        }}\n        variantColor={post.voteStatus === 1 ? \"green\" : undefined}\n        isLoading={loadingState === \"updoot-loading\"}\n        aria-label=\"updoot post\"\n        icon=\"chevron-up\"\n      />\n      {post.points}\n      <IconButton\n        onClick={async () => {\n          if (post.voteStatus === -1) {\n            return;\n          }\n          setLoadingState(\"downdoot-loading\");\n          await vote({\n            variables: {\n              postId: post.id,\n              value: -1,\n            },\n            update: (cache) => updateAfterVote(-1, post.id, cache),\n          });\n          setLoadingState(\"not-loading\");\n        }}\n        variantColor={post.voteStatus === -1 ? \"red\" : undefined}\n        isLoading={loadingState === \"downdoot-loading\"}\n        aria-label=\"downdoot post\"\n        icon=\"chevron-down\"\n      />\n    </Flex>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
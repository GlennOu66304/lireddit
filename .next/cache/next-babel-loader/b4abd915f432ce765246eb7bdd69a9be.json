{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject16() {\n  var data = _taggedTemplateLiteral([\"\\n    query Posts($limit: Int!, $cursor: String) {\\n  posts(limit: $limit, cursor: $cursor) {\\n    hasMore\\n    posts {\\n      ...PostSnippet\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject16 = function _templateObject16() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject15() {\n  var data = _taggedTemplateLiteral([\"\\n    query Post($id: Int!) {\\n  post(id: $id) {\\n    id\\n    createdAt\\n    updatedAt\\n    title\\n    points\\n    text\\n    voteStatus\\n    creator {\\n      id\\n      username\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject15 = function _templateObject15() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n    query Me {\\n  me {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Vote($value: Int!, $postId: Int!) {\\n  vote(value: $value, postId: $postId)\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdatePost($id: Int!, $title: String!, $text: String!) {\\n  updatePost(id: $id, title: $title, text: $text) {\\n    id\\n    title\\n    text\\n    textSnippet\\n  }\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Register($options: UsernamePasswordInput!) {\\n  register(options: $options) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Logout {\\n  logout\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($usernameOrEmail: String!, $password: String!) {\\n  login(usernameOrEmail: $usernameOrEmail, password: $password) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email)\\n}\\n    \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeletePost($id: Int!) {\\n  deletePost(id: $id)\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreatePost($input: PostInput!) {\\n  createPost(input: $input) {\\n    id\\n    createdAt\\n    updatedAt\\n    title\\n    text\\n    points\\n    creatorId\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ChangePassword($token: String!, $newPassword: String!) {\\n  changePassword(token: $token, newPassword: $newPassword) {\\n    ...RegularUserResponse\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUserResponse on UserResponse {\\n  errors {\\n    ...RegularError\\n  }\\n  user {\\n    ...RegularUser\\n  }\\n}\\n    \", \"\\n\", \"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularUser on User {\\n  id\\n  username\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment RegularError on FieldError {\\n  field\\n  message\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment PostSnippet on Post {\\n  id\\n  createdAt\\n  updatedAt\\n  title\\n  points\\n  textSnippet\\n  voteStatus\\n  creator {\\n    id\\n    username\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport var PostSnippetFragmentDoc = gql(_templateObject());\nexport var RegularErrorFragmentDoc = gql(_templateObject2());\nexport var RegularUserFragmentDoc = gql(_templateObject3());\nexport var RegularUserResponseFragmentDoc = gql(_templateObject4(), RegularErrorFragmentDoc, RegularUserFragmentDoc);\nexport var ChangePasswordDocument = gql(_templateObject5(), RegularUserResponseFragmentDoc);\n\n/**\n * __useChangePasswordMutation__\n *\n * To run a mutation, you first call `useChangePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePasswordMutation, { data, loading, error }] = useChangePasswordMutation({\n *   variables: {\n *      token: // value for 'token'\n *      newPassword: // value for 'newPassword'\n *   },\n * });\n */\nexport function useChangePasswordMutation(baseOptions) {\n  return Apollo.useMutation(ChangePasswordDocument, baseOptions);\n}\nexport var CreatePostDocument = gql(_templateObject6());\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  return Apollo.useMutation(CreatePostDocument, baseOptions);\n}\nexport var DeletePostDocument = gql(_templateObject7());\n\n/**\n * __useDeletePostMutation__\n *\n * To run a mutation, you first call `useDeletePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePostMutation, { data, loading, error }] = useDeletePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePostMutation(baseOptions) {\n  return Apollo.useMutation(DeletePostDocument, baseOptions);\n}\nexport var ForgotPasswordDocument = gql(_templateObject8());\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  return Apollo.useMutation(ForgotPasswordDocument, baseOptions);\n}\nexport var LoginDocument = gql(_templateObject9(), RegularUserResponseFragmentDoc);\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      usernameOrEmail: // value for 'usernameOrEmail'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  return Apollo.useMutation(LoginDocument, baseOptions);\n}\nexport var LogoutDocument = gql(_templateObject10());\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  return Apollo.useMutation(LogoutDocument, baseOptions);\n}\nexport var RegisterDocument = gql(_templateObject11(), RegularUserResponseFragmentDoc);\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  return Apollo.useMutation(RegisterDocument, baseOptions);\n}\nexport var UpdatePostDocument = gql(_templateObject12());\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  return Apollo.useMutation(UpdatePostDocument, baseOptions);\n}\nexport var VoteDocument = gql(_templateObject13());\n\n/**\n * __useVoteMutation__\n *\n * To run a mutation, you first call `useVoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useVoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [voteMutation, { data, loading, error }] = useVoteMutation({\n *   variables: {\n *      value: // value for 'value'\n *      postId: // value for 'postId'\n *   },\n * });\n */\nexport function useVoteMutation(baseOptions) {\n  return Apollo.useMutation(VoteDocument, baseOptions);\n}\nexport var MeDocument = gql(_templateObject14(), RegularUserFragmentDoc);\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return Apollo.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(MeDocument, baseOptions);\n}\nexport var PostDocument = gql(_templateObject15());\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  return Apollo.useQuery(PostDocument, baseOptions);\n}\nexport function usePostLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostDocument, baseOptions);\n}\nexport var PostsDocument = gql(_templateObject16(), PostSnippetFragmentDoc);\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      limit: // value for 'limit'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  return Apollo.useQuery(PostsDocument, baseOptions);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  return Apollo.useLazyQuery(PostsDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/glenn/lireddit/src/pages/register.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { InputField } from \"../components/InputField\";\nimport { useRegisterMutation, MeDocument } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { withApollo } from \"../utils/withApollo\";\n\nvar Register = function Register(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 1),\n      register = _useRegisterMutation2[0];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return register({\n                  variables: {\n                    options: values\n                  },\n                  update: function update(cache, _ref4) {\n                    var data = _ref4.data;\n                    cache.writeQuery({\n                      query: MeDocument,\n                      data: {\n                        __typename: \"Query\",\n                        me: data === null || data === void 0 ? void 0 : data.register.user\n                      }\n                    });\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n                  setErrors(toErrorMap(response.data.register.errors));\n                } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n                  // worked\n                  router.push(\"/\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, function (_ref5) {\n    var isSubmitting = _ref5.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"username\",\n      placeholder: \"username\",\n      label: \"Username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"email\",\n      placeholder: \"email\",\n      label: \"Email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    })), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"password\",\n      placeholder: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"register\"));\n  }));\n};\n\n_s(Register, \"+jIDrcLSNrHT9k8ae+O8lecjNWk=\", false, function () {\n  return [useRouter, useRegisterMutation];\n});\n\n_c = Register;\nexport default withApollo({\n  ssr: false\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/glenn/lireddit/src/pages/register.tsx"],"names":["React","Formik","Form","Box","Button","Wrapper","InputField","useRegisterMutation","MeDocument","toErrorMap","useRouter","withApollo","Register","router","register","email","username","password","values","setErrors","variables","options","update","cache","data","writeQuery","query","__typename","me","user","response","errors","push","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { InputField } from \"../components/InputField\";\nimport { useRegisterMutation, MeQuery, MeDocument } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { withApollo } from \"../utils/withApollo\";\n\ninterface registerProps {}\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const [register] = useRegisterMutation();\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ email: \"\", username: \"\", password: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register({\n            variables: { options: values },\n            update: (cache, { data }) => {\n              cache.writeQuery<MeQuery>({\n                query: MeDocument,\n                data: {\n                  __typename: \"Query\",\n                  me: data?.register.user,\n                },\n              });\n            },\n          });\n          if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          } else if (response.data?.register.user) {\n            // worked\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"username\"\n              placeholder=\"username\"\n              label=\"Username\"\n            />\n            <Box mt={4}>\n              <InputField name=\"email\" placeholder=\"email\" label=\"Email\" />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"Password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              isLoading={isSubmitting}\n              variantColor=\"teal\"\n            >\n              register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default withApollo({ ssr: false })(Register);\n"]},"metadata":{},"sourceType":"module"}
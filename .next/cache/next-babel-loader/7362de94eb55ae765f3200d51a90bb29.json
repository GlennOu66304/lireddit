{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../../../components/InputField\";\nimport { Layout } from \"../../../components/Layout\";\nimport { usePostQuery, useUpdatePostMutation } from \"../../../generated/graphql\";\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\nimport { withApollo } from \"../../../utils/withApollo\";\n\nvar EditPost = function EditPost(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var intId = useGetIntId();\n\n  var _usePostQuery = usePostQuery({\n    skip: intId === -1,\n    variables: {\n      id: intId\n    }\n  }),\n      data = _usePostQuery.data,\n      loading = _usePostQuery.loading;\n\n  var _useUpdatePostMutatio = useUpdatePostMutation(),\n      _useUpdatePostMutatio2 = _slicedToArray(_useUpdatePostMutatio, 1),\n      updatePost = _useUpdatePostMutatio2[0];\n\n  if (loading) {\n    return __jsx(Layout, null, __jsx(\"div\", null, \"loading...\"));\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, null, __jsx(Box, null, \"could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\"\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return updatePost({\n                  variables: _objectSpread({\n                    id: intId\n                  }, values)\n                });\n\n              case 2:\n                router.back();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, null, __jsx(InputField, {\n      name: \"title\",\n      placeholder: \"title\",\n      label: \"Title\"\n    }), __jsx(Box, {\n      mt: 4\n    }, __jsx(InputField, {\n      textarea: true,\n      name: \"text\",\n      placeholder: \"text...\",\n      label: \"Body\"\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\"\n    }, \"update post\"));\n  }));\n};\n\nexport default withApollo({\n  ssr: false\n})(EditPost);","map":null,"metadata":{},"sourceType":"module"}